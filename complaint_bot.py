from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
import asyncio
import os

load_dotenv()

API_TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SendReplyStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_message = State()

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "‚úâ –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∂–∞–ª–æ–±—É —Å—é–¥–∞. "
        "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã ‚Äî –∞–¥–º–∏–Ω –≤—Å—ë –ø–æ–ª—É—á–∏—Ç."
    )

@dp.message(Command("reply"))
async def cmd_reply(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(SendReplyStates.waiting_for_user_id)

@dp.message(SendReplyStates.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    user_id = int(message.text)
    await state.update_data(user_id=user_id)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏ –¥—Ä.), –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await state.set_state(SendReplyStates.waiting_for_message)

@dp.message(SendReplyStates.waiting_for_message, F.content_type.in_(
    [ContentType.TEXT, ContentType.PHOTO, ContentType.DOCUMENT, ContentType.VIDEO, ContentType.AUDIO, ContentType.VOICE,
     ContentType.VIDEO_NOTE, ContentType.STICKER, ContentType.ANIMATION, ContentType.CONTACT, ContentType.LOCATION]))
async def process_message_to_send(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    if not user_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥—É /reply")
        await state.clear()
        return

    try:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
        if message.content_type == ContentType.TEXT:
            await bot.send_message(chat_id=user_id, text=message.text)
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç –∏ —Ñ–∞–π–ª—ã)
            await bot.copy_message(chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id)
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await state.clear()

@dp.message(SendReplyStates.waiting_for_message)
async def process_unsupported(message: Message):
    await message.answer("‚ö† –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏ –¥—Ä.")

@dp.message()
async def handle_complaint(message: Message):
    user = message.from_user
    user_id_str = str(user.id)
    user_name = f"@{user.username}" if user.username else user.full_name

    header = f"üö® –ñ–∞–ª–æ–±–∞ –æ—Ç {user_name}\nID: {user_id_str}\n\n"

    if message.text:
        complaint = header + message.text
        await bot.send_message(ADMIN_ID, complaint)
        await bot.send_message(ADMIN_ID, user_id_str)
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return

    if message.content_type in (
        ContentType.PHOTO, ContentType.DOCUMENT, ContentType.VIDEO, ContentType.AUDIO, ContentType.VOICE,
        ContentType.VIDEO_NOTE, ContentType.STICKER, ContentType.ANIMATION, ContentType.CONTACT, ContentType.LOCATION,
    ):
        await message.forward(ADMIN_ID)
        await bot.send_message(ADMIN_ID, f"üö® –ñ–∞–ª–æ–±–∞ –æ—Ç {user_name}\nID: {user_id_str}\n\n*(–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)*")
        await bot.send_message(ADMIN_ID, user_id_str)
        await message.answer("‚úÖ –í–∞—à —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await message.answer(
        "‚ö† –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª."
    )


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())